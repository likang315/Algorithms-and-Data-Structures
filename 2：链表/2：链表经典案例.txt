```java
//定义链表结点
public class ListNode 
{
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}
```

### 1：判断两个链表是否有交结点

```c
public ListNode getIntersectionNode(ListNode h1, ListNode h2) {
{
	ListNode p1,p2;
	int count = 0;
	for (p1 = h1; p1.next!=null; count++, p1 = p1.next);         //统计h1的结点总数
	for (p2 = h2; p2.next!=null; count--, p2 = p2.next);         //统计好h2结点的总数，求出多余数
	if(count>0)                                        //判断h1还是h2长
	{
		p1 = h1;
		p2 = h2;
	}
	else
	{
		p1 = h2;
		p2 = h1;
		count = -count;
	}
    //跑过多余项
	for (; count!=0; p1 = p1.next, count--);            
    //判断指向是不是同结点
	for (; p1!=null && p2!=null && p1 != p2; p1 = p1.next, p2 = p2.next);        
	if (!(p1!=null && p2!=null))
		return null;
	else
		return p1;				//返回交点
}
```

### 2：将两个升序链表合并成一个升序表

```java
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        ListNode p = list1,q = list2;
        //创建头结点
        ListNode head = new ListNode(-1);
        ListNode tail = head;
        //比较大小，合并
        while(p != null && q != null)
        {
            if(p.val < q.val) {
                tail=tail.next = p;
                p = p.next;
            }else 
            {
                tail=tail.next = q;
                q = q.next;
            }
        }
         
        if(p != null) {
            tail.next = p;
        }
        if(q != null) {
            tail.next = q;
        }
        return head.next;
    }
}
```



### 3：



